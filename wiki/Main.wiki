#summary This page presents "PANDA-AEmilia": Performance Antipatterns aNd feeDback on software Architectures, specified in the AEmilia Description Language.

= Introduction =

The problem of interpreting the results of performance analysis is quite critical in the software performance domain: mean values, variances, and probability distributions are hard to interpret for providing feedback to software architects. Support to the interpretation of such results that helps to fill the gap between numbers and architectural alternatives is still lacking.

PANDA is a framework for addressing the results interpretation and the feedback generation problems by means of performance antipatterns, that are recurring solutions to common mistakes (i.e. bad practices) in the software development. Such antipatterns can play a key role in the software performance domain, since they can be used in the search of performance problems as well as in the formulation of their solutions in terms of architectural alternatives.

*_This project aims at enabling the usage of software performance antipatterns in the AEmilia Description Language._*

= Details =

The content of this project is here reported:

  * The specification of a metamodel, based on the _Performance Antipatterns Modeling Language (PAML)_, containing the architectural model elements of AEmilia: PAML-AEmilia, please refer to the Dowloads/metamodel.zip.

  * The specification of a Text-to-Model Transformation that allows the transformation of an AEmilia specification (file.aem) into an AEmilia model, please refer to the Dowloads/text2ModelTransf.zip.

  * The detection tool that allows the detection of software performance antipatterns in the AEmilia model, please refer to the Dowloads/detectionTool.zip.

  * The user guide that explains how-to-use metamodel, text2ModelTransf, and detectionTool sources, please refer to the Dowloads/panda-aemilia-userGuide.pdf.

  * PANDA-AEmilia at work on a case study: Bus On Air, i.e. a system aimed at developing a set of services for public transportation targeting both the end-users (passengers) and the suppliers (transportation agencies), please refer to the Dowloads/BoA-caseStudy.zip.

= References =

[AEmilia-ADL] M. Bernardo, P. Ciancarini, and L. Donatiello, “Architecting families of software systems with process algebras,” ACM
Trans. Softw. Eng. Methodol., vol. 11, no. 4, pp. 386–426, 2002.